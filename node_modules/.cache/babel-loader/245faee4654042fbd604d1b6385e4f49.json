{"ast":null,"code":"var _jsxFileName = \"/home/saul/dev/chino-api-react/src/components/Planets.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-query';\nimport Planet from './Planet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchPlanets = async () => {\n  const res = await fetch('http://swapi.dev/api/planets/');\n  return res.json();\n};\n\nconst Planets = () => {\n  _s();\n\n  const {\n    data,\n    status\n  } = useQuery('planets', fetchPlanets, {\n    staleTime: 2000\n  });\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Planets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), status === 'loading' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), status === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.results.map(planet => /*#__PURE__*/_jsxDEV(Planet, {\n        planet: planet\n      }, planet.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Planets, \"r91jLNwsqTqZNm64JWU7RjPAH/8=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\nexport default function Wrapped() {\n  return /*#__PURE__*/_jsxDEV(Planets, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n}\n_c2 = Wrapped;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Planets\");\n$RefreshReg$(_c2, \"Wrapped\");","map":{"version":3,"sources":["/home/saul/dev/chino-api-react/src/components/Planets.js"],"names":["React","useQuery","Planet","fetchPlanets","res","fetch","json","Planets","data","status","staleTime","console","log","results","map","planet","name","Wrapped"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAGA,MAAMC,YAAY,GAAG,YAAY;AAC/B,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAAvB;AACA,SAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,CAHD;;AAKA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBR,QAAQ,CAAC,SAAD,EAAYE,YAAZ,EAA0B;AAC1DO,IAAAA,SAAS,EAAE;AAD+C,GAA1B,CAAlC;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIGC,MAAM,KAAK,OAAX,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,EAQGA,MAAM,KAAK,SAAX,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,EAYGA,MAAM,KAAK,SAAX,iBACC;AAAA,gBACID,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAiBC,MAAM,iBAAI,QAAC,MAAD;AAA0B,QAAA,MAAM,EAAEA;AAAlC,SAAaA,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA,cAA3B;AADJ;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA3BD;;GAAMT,O;UACsBN,Q;;;KADtBM,O;AA6BN,eAAe,SAASU,OAAT,GAAkB;AAC/B,sBACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAEE;MAHoBA,O","sourcesContent":["import React from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport Planet from './Planet';\r\n\r\n\r\nconst fetchPlanets = async () => {\r\n  const res = await fetch('http://swapi.dev/api/planets/');\r\n  return res.json();\r\n}\r\n\r\nconst Planets = () => {\r\n  const  { data, status } = useQuery('planets', fetchPlanets, {\r\n    staleTime: 2000\r\n  });\r\n  console.log(data);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Planets</h2>\r\n      {/*<p> { status } </p>*/}\r\n\r\n      {status === 'error' && (\r\n        <div>Error fetching data</div>\r\n      )}\r\n\r\n      {status === 'loading' && (\r\n        <div>Loading data</div>\r\n      )}\r\n\r\n      {status === 'success' && (\r\n        <div>\r\n          { data.results.map(planet => <Planet key={planet.name} planet={planet} />) }\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Wrapped(){\r\n  return(\r\n      <Planets/>\r\n  )}"]},"metadata":{},"sourceType":"module"}